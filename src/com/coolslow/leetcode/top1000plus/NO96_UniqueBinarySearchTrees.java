package com.coolslow.leetcode.top1000plus;

/**
 * 96. 不同的二叉搜索树
 * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
 *
 * 示例:
 * 输入: 3
 * 输出: 5
 * 解释:
 * 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
 *    1         3     3      2      1
 *     \       /     /      / \      \
 *      3     2     1      1   3      2
 *     /     /       \                 \
 *    2     1         2                 3
 *
 */
public class NO96_UniqueBinarySearchTrees {

    /**
     * 方法 & 思路：
     * ----------------------------------------
     * 1. 动态规划：
     * 给定一个有序序列： 1 ～ n，为了构建出一颗二叉树，可以遍历每个数字 i，将该数字作为树根。
     * 将 1 ～ (i - 1) 作为左子树，将 (i + 1) ~ n作为右子树。然后可以按照同样的方式递归构建左子树和右子树。
     *
     * 注意：在上述构建的过程中，由于根的值不同，因此我们能保证每棵二叉搜索树是唯一的。
     * 由此可见，原问题可以分解成规模较小的两个子问题，且子问题的解可以复用。因此，我们可以想到使用动态规划来求解本题。
     *
     * 题目要求是计算不同二叉搜索树的个数。为此，我们可以定义两个函数：
     * 1. G(n): 长度为 n 的序列能构成的不同二叉搜索树的个数。
     * 2. F(i, n): 以 i 为根结点序列长度为n的不同搜索二叉树。
     * 因此 G(n) 是我们求解所需的函数。
     *
     * 稍后我们将看到，G(n) 可以从 F(i, n) 得到，而 F(i, n) 又会递归地依赖于 G(n)。
     * 因此，不同的二叉搜索树的总数是 F(i, n) 对应得到的 G(n)的总数，是对遍历所有i(1 <= i <= n)的 F(i, n)之和：
     * G(n) = Sum(F(i, n)) [i = 1 ~ n]
     *
     * 考虑极端情况：当序列的长度为 1 或 0时，G(1) = 1, G(0) = 1。
     *
     * 可以很明显的看到，下面题的时间复杂度为 O(n^2)。空间复杂度则为 O(n)。
     *
     * @param n
     * @return
     */
    public static int UniqueBinaryNumberTreeI(int n) {
        // 数组的长度为 n + 1 (思考为何？)
        int[] G = new int[n + 1];
        G[0] = 1;
        G[1] = 1;

        // 为何从下标 2 开始，因为G[0] 和G[1]已经有初值了。
        for(int i = 2; i <= n; i++) {
            for(int j = 1; j <= i; j++) {
                G[i] += G[j - 1] * G[i - j];
            }
        }

        return G[n];
    }

    /**
     * 解法二：公式法
     * 事实上我们在方法一中推导出的 G(n)函数的值在数学上被称为卡塔兰数。
     *
     * C(0) = 1; C(n + 1) = (2 * (2n + 1))/ (n + 2) * C(n)
     *
     * @param n
     * @return
     */
    public static int UniqueBinaryNumberTreeII(int n) {

        // 提示：在这里需要用 long 类型防止计算过程中的溢出
        long C = 1;
        for (int i = 0; i < n; ++i) {
            C = C * 2 * (2 * i + 1) / (i + 2);
        }
        return (int) C;
    }
}
