package com.coolslow.sort.inplace;


import com.coolslow.utils.MyUtils;

class InsertSort {


    /**
     * 1、从数组第2个元素开始抽取元素。
     * 2、把它与左边第一个元素比较，如果左边第一个元素比它大，则继续与左边第二个元素比较下去，直到遇到不比它大的元素，然后插到这个元素的右边。
     * 3、继续选取第3，4，….n个元素,重复步骤 2 ，选择适当的位置插入。
     */
    static <T extends Comparable<T>> void sort(T[] data) {
        if (data == null || data.length == 1) {
            return;
        }
        int count = data.length;
        for (int i = 1; i < count; i++) {
            int k = i - 1;
            while (k >= 0 && data[k].compareTo(data[i]) > 0) {
                k--;
            }
            T temp = data[i];
            for (int j = i; j > k + 1; j--) {
                data[j] = data[j - 1];
            }
            data[k + 1] = temp;

            MyUtils.printProgressing(i, count);

        }
    }

    /*
     *
     *
     * ====================================== 开始创建百万级(1048576个)数据 =======================================
     * ====================================== 创建百万级(1048576个)数据 耗时947毫秒 =======================================
     * ====================================== 开始验证数据 =======================================
     * 1048576个数，没有重复值
     * ====================================== 验证数据 耗时66毫秒 =======================================
     * ====================================== 开始插入排序 =======================================
     * ====================================== 插入排序 耗时1971264毫秒 (32分8秒)=======================================
     * ====================================== 开始排序正确性验证 =======================================
     * 排序正确
     * ====================================== 排序正确性验证 耗时10毫秒 =======================================
     *
     */


}
